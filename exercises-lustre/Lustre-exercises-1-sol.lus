(* 13th Summer SChool on Formal Techniques

   Lustre and Kind 2 practice
*)

(* Recall: every term denotes a stream in Lustre:

   Some helpful non-temporal operators

   false    (boolean constant)
   true     (boolean constant)
   a and b  (boolean conjunction)
   a or b   (boolean disunction)
   a => b   (boolean implication)
   
   a = b    (equality between terms of the same type)
   a <> b   (disequality between terms of the same type)

   a < b    (strict inequality then between int values or real values)
   a <= b   (non-strict inequality then between int values or real values)
  
   0, 1 ... (integer constants)
   0.0, ... (real constants)
   
   a mod n  (modulo n operator over integers)


  Temporal operators

  timestep         0   1   2   3   4  ...
  --------------------------------------- 
            8  =   8,  8,  8,  8,  8, ...  
        false  =  ff, ff, ff, ff, ff, ...
            x  =  x0, x1, x2, x3, x4, ...
            y  =  y0, y1, y2, y3, y4, ...
        pre x  =  //, x0, x1, x2, x3, ...
       x -> y  =  x0, y1, y2, y3, y4, ...
   x -> pre y  =  x0, y0, y1, y2, y3, ...
*)


(* The current value of isEven(n) is true iff 
   the current value of n is even
   (tip: use (_ mod _) operator)
*)
node isEven (n: int) returns (b: bool);
let  
  b = (n mod 2 = 0);
tel

(* The current value of onlyEven(n) is n 
   if n is even, and is 0 otherwise
*)
node onlyEven (x: int) returns (y: int);
let
  y =  if isEven(x) then x else 0;
tel


(* EvensFrom(x) contains, in increasing order, 
   all even numbers greater than the first value of x
*)
node EvensFrom (x: int) returns (e: int);
let
  e = (if isEven(x) then x + 2 else x + 1) -> 2 + pre e;
tel

(* The current value of Sum(x) is the sum of 
   all values of x up to now
*)
node Sum (x: int) returns (s: int);
let
   s =  x -> x + pre s;
tel
(* Example:
        0   1   2   3   4   5 ...
   ------------------------------- 
   x =  5,  3, -1,  2,  7,  8, ...
   s =  5,  8,  7,  9, 16, 24, ...
*)





-- s(n) is the constant stream 1,2,3,3,3,3,...
-- note: input is irrelevant
node s (n: int) returns (x: int);
let
  x = 1 -> if pre x < 3 then pre x + 1 else 3;
tel

-- more compact version of s
node s1 (n: int) returns (x:  int);
let
  x = 1 -> pre (2 -> 3);
tel
-- (2 -> 3)     =   2, 3, 3, 3, ...
-- pre (2 -> 3) =  //, 2, 3, 3, ...
-- x            =   1, 2, 3, 3, ...


(* First(x) is a constant stream whose value is the first value of x.
*)
node First (x: int) returns (fx: int);
let
  fx = x -> pre fx;
tel

-- s2(n) is the stream n0, 2*n0, 3*n0, ...
-- where n0 is the first value of n
node s2 (n: int) returns (x: int);
  var n0: int;
  var c: int;
let
  n0 = n -> pre n0;
  c = 1 -> pre c + 1;
  x = n -> c * n0;
tel

(* For any boolean stream b,
   fact(b) is the stream containing all the factorial numbers, in increasing order. 
*)
node fact (_: bool) returns (f: int);
var n: int;
let
  n = 0 -> pre n + 1;
  f = 1 -> n * pre f;
tel


(* Alternate(x) starts at x_0, the initial value of x, and
   keeps alternating between the current value of x and x_0
*)
node Alternate (x: int) returns (y: int);
var x_0: int;
    b: bool;
let
  x_0 = x -> pre x_0;
  b = true -> not pre b;
  y = if b then x_0 else x;
tel


(* Timer(reset, pause) starts at 0, and keeps increasing by 1
   while neither reset nor pause is true. 
   When reset is true the timer goes back to 0.
   When pause is true the timer pauses.
   Resetting takes precedence over pausing.
*)
node Timer( reset, pause : bool ) returns ( c : int );
let
  c = 0 -> if reset then 0
           else if pause then pre c
           else pre c + 1;
tel

(* Cycle returns a stream that cycles through 
   the values 0, 1, 2, 3, 4, for A, in that order
*)
node Cycle(_:bool) returns ( A : int );
let
  A = 0 -> if pre A = 4 then 0 else pre A + 1;
tel

(* Formalize the requirements below and then 
   check the correcness of your definition of Cycle
   against those requirements  
*)
node CycleObs() returns ( n : int );
let
  n = Cycle(true);

  -- n is between 0 and 4
  check 0 <= n and n <= 4;

  -- Initially, n is 0
   check n = 0 -> true;

  -- n increases by 1, unless it is 4
  check true -> pre n < 4 => n = pre n + 1; 
  -- a value of 4 for n is followed by a 0
  check true -> pre n = 4 => n = 0; 
tel

(* Cycle2(_) **uses Timer** to cycle through 
   the values 0, 1, 2, 3, 4, for A, in that order
*)

node Cycle2(_:bool) returns ( A : int );
let
  A = Timer(true -> pre A = 4, false);
tel

(* Use the observer node below to check that 
   your definitions of Cycle and of Cycle2 are equivalent
*)

node Cycle2Obs() returns ( OK : bool );
  var b: bool;
let
  b = (Cycle(true) = Cycle2(true));

  check b; 
tel


(* Counter(x, reset) starts at x and keeps increasing by 1 
   until reset is true, in which case it restarts with the 
   initial value of x
   It uses First(x) to refer to the initial value of x.
*)
node Counter (x: int; reset: bool) returns (c: int);
let
  c = x -> if reset then First(x) else pre c + 1;
tel

(* Counter2 is equivalent to Counter but does not use First(x)
 *)
node Counter2 (x: int; reset: bool) returns (c: int);
  var fx: int;
let
  fx = x -> pre fx;
  c = x -> if reset then fx else pre c + 1;
tel

(* This _observer_ node takes feeds its input to Counter
   and returns Counter's output
   while also checking that produces the same output
   as Counter when given the same input. 
*)
node CounterObs (x: int; reset: bool) returns (c: int);
let
  c = Counter(x, reset);
  
  check c = Counter2(x, reset);
tel


