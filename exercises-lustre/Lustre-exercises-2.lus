(* 13th Summer SChool on Formal Techniques

   Lustre and Kind 2 practice
*)

(* Boolean Switch

   A switch with two buttons, Set and Reset.
   Pressing Set turns the switch on.
   Pressing Reset turns the switch off
   If Set and Reset are initially both unpressed,
   the initial position of the switch is determined by
   a third signal, Init
*)
node Switch( Set, Reset, Init : bool ) returns ( S : bool );
let
    S = if Set then true 
        else if Reset then false
        else (Init -> pre S);
tel

(* Formalize the requirements below and then 
   check the correcness of your definition of Switch
   against those requirements  
*)
node ReqSwitch( Set, Reset, Init : bool )
returns ( R1, R2, R3 : bool );
var S : bool;
let
  S = Switch( Set, Reset, Init );

  -- setting turns the switch on
  R1  =  false;
 
  -- resetting turns the switch off
  R2 =  false;
  
  -- doing nothing maintains the previous value
  R3 = false;

  check R1;
  check R2; 
  check R3;
tel


(* This is an implementation of a simple traffic light system with one
   (bi-directional) car lane and one pedestrian crossing with a button
   for pedestrians.
  
                              ooo
         ------------------==-------------------
                           ==
                           ==
         ------------------==-------------------
                      ooo
  
*)

node TrafficLight( Button: bool )
returns ( Red, Yellow, Green, Walk, DontWalk: bool );

var Phase, prePhase: int;
let
  prePhase = 0 -> pre Phase;
  Phase    = if Button and prePhase = 0 then
               1
             else if 0 < prePhase and prePhase < 10 then
               prePhase + 1
             else
               0;

  Green    = Phase = 0;
  Yellow   = Phase = 1;
  Red      = Phase > 1;

  Walk     = Phase > 2 and Phase < 10;
  DontWalk = not Walk;
tel


(* A synchronous observer that checks a number of safety properties
   for the TrafficLight.

   Formalize them and then us Kind 2 to prove them.
   Use the auxiliary nodes below as needed. 
*)

-------------------
-- Auxiliary nodes
-------------------

-- Sofar(X) is true iff X has been constantly true until now
node Sofar( X : bool ) returns ( Y : bool );
let
  Y = X -> (X and pre Y);
tel

-- Counts how many consecutive steps X has been true
node Count (X: bool) returns (O: int) ;
  var preO: int ;
let 
  preO = 0 -> pre O ;
  O = if X then preO + 1 else 0 ;
tel

-- Auxiliary, functional node
function toInt(b: bool) returns (n: int);
let
  n = if b then 1 else 0;
tel

--------------------------
-- Traffic Light Observer
--------------------------

node ReqTrafficLight( Button : bool )
returns (R1, R2, R2a, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15: bool);
  var  Red, Yellow, Green, Walk, DontWalk : bool;
  var  CarsAllowed : bool; -- auxiliary var
let
  (Red, Yellow, Green, Walk, DontWalk) = TrafficLight(Button);

  -- Car are allowed iff the traffic light is green or yellow
  CarsAllowed = false;

  -- R1: Walk is never on when cars are allowed
  R1 = false;
  check R1;

  -- R2: Red and Green are never on at the same time
  R2 =  false;
  check R2;

-- R2a At most one light is true (use ToInt)
     
  R2a = false;
  check R2a;

  -- R3: at all times one of the tree colored lights is on
  R3 = false;
  check R3;

  -- R4: Walk is on only if Red is
  R4 = false;
  check R4;

  -- R5: Walk is on iff DontWalk is off
  R5 = false;
  check R5;

  -- R6: Red cannot immediately follow Green
  R6 = false;
  check R6;

  -- R7: Walk is off if cars were allowed in the previous step 
  R7 = false;
  check R7;

  -- R8: Cars are not allowed if Walk was on in the previous step 
  R8 = false;
  check R8;

  -- R9: Yellow is never on for two or more consecutive steps
  R9 = false;
  check R9;

  -- R10: Red changes directly to green
  R10 = false;
  check R10;

  -- R11: If the button was never pressed the light is Green
  R11 = false;
  check R11;
  
  -- R12: Red is on whenever Walk is 
  R12 = false;
  check R12;

  -- R13: Yellow can only follow Green 
  R13 = false;
  check R13;

  -- R14: Red is on for at most 9 consecutive steps
  R14 = false ;
  check R14;

  -- R15: When Red turns on, Walk is still off
  R15 = false;
  check R15;

--%MAIN;
tel

